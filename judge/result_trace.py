from dataclasses import dataclass, field
from typing import Any, Optional


@dataclass
class ResultTrace:
    """
    Full result information of an SMT-enabled LogicAgent invocation. Includes
    the solution output as well as debug information.
    """

    # Unique identifier for this trace, usually a string or integer task ID from
    # a benchmark.
    id: Any

    # All messages sent to the inference client.
    messages: list[dict[str, str]] = field(default_factory=list)

    # Python code generated by the LLM.
    python_code: Optional[str] = None

    # C or SMT constraints converted from Python code.
    solver_constraints: Optional[str] = None

    # Output of solver (currently CBMC).
    solver_output: Optional[str] = None

    # Exit code of solver.
    solver_exit_code: Optional[int] = None

    # Solution provided by solver.
    solution: Optional[str] = None

    def __repr__(self):
        return f"ResultTrace(messages={repr(self.messages)}, python_code={repr(self.python_code)}), solver_constraints={repr(self.solver_constraints)}), solver_output={repr(self.solver_output)}), solver_exit_code={repr(self.solver_exit_code)}), solution={repr(self.solution)})"
